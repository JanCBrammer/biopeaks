# All CI tasks (linting, testing, building) are maintained in this workflow file
# and their inter-dependencies controlled with job-level `if` and `needs` until
# GitHub Actions allows for them to be factored out into separate, inter-dependent
# workflow files.
# See https://github.community/t/depend-on-another-workflow/16311/8.

name: CI
on: [push, pull_request, release]    # runs on all branches
env:
  PYTHON_VERSION: 3.9

jobs:

  lint:

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8

    - name: Lint
      run: flake8 . --exclude biopeaks/images,biopeaks/tests/testdata,biopeaks/resources.py --max-complexity=10 --ignore E303,C901,E203,W503,E501,W504,E129,W605,E371,E731


  test:

    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
          python-version: ${{ env.PYTHON_VERSION }}

    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-pip-wheels
      uses: actions/cache@v2
      with:
        path: ~/.cache
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root

    - name: Install biopeaks
      run: poetry install --no-interaction

    - name: Test on Windows
      if: matrix.os == 'windows-latest'
      shell: bash -l {0}
      run: |
        source $VENV
        pytest -v

    - name: Test on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |    # run coverage only on Ubuntu
        source $VENV
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
        xvfb-run pytest -v --cov-config=.coveragerc --cov-report=xml --cov=biopeaks

    - name: Upload coverage report
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml


  build_distribution:

    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-pip-wheelsy
      uses: actions/cache@v2
      with:
        path: ~/.cache
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Build and upload distribution
      env:
        PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run:  |
        poetry publish -u $PYPI_USERNAME -p $PYPI_PASSWORD --build


  build_executable:

    needs: test
    runs-on: windows-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-pip-wheels
      uses: actions/cache@v2
      with:
        path: ~/.cache
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root --no-dev --extras "pyinstaller"

    - name: Build executable
      shell: bash -l {0}
      run:  |
        source $VENV
        pyinstaller --onefile --windowed --name=biopeaks --icon=biopeaks/images/python_icon.ico biopeaks/__main__.py

    - name: Upload executable
      uses: actions/upload-artifact@v2
      with:
        name: biopeaks_windows
        path: dist/biopeaks.exe


  upload_executable_to_release:    # separate job on Ubuntu since JasonEtco/upload-to-release@master only runs on Linux

    needs: build_executable
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:

    - name: Download executable
      uses: actions/download-artifact@v2
      with:
        name: biopeaks_windows

    - name: Upload executable to release
      uses: JasonEtco/upload-to-release@master
      with:
        args: biopeaks.exe application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}    # token generated implicitly